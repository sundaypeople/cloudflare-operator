name: test

on: [ workflow_dispatch ]
env:
  TARGET_REPO: cloudflare-operator-helm
jobs:
  release:
    name: Run on alma9 self host
    runs-on: self-hosted
    steps:
      - name: Clone the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: setup go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.0'

      - name: semantic -version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          bump_each_commit: true
          debug: true

      # - name: Print Diagnostic Output
      #   run: echo "$DEBUG_OUTPUT"
      #   env:
      #     DEBUG_OUTPUT: ${{ steps.version.outputs.debug_output }}
      - name: semantic -version
        run: echo ${{ steps.version.outputs.version_tag }}
    
      # - name: Set up Docker
      #   uses: docker/setup-docker-action@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          cache-binary: true
          driver: docker


      - name: Login to Docker Hub
        uses: docker/login-action@v3
        env:
          USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          username: ${{ env.USERNAME }}
          password: ${{ env.TOKEN }}

      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   env:
      #     USERNAME: ${{ vars.DOCKERHUB_USERNAME }} 
      #   with:
      #     push: true
      #     tags: ${{ env.USERNAME }}/cloudflare-controller:${{ steps.version.outputs.version_tag }}
          # cache-from: ${{ env.USERNAME }}/cloudflare-controller:cache,type=local,src=~/cache
          # cache-to: ${{ env.USERNAME }}/cloudflare-controller:cache,type=local,src=~/cache

      # - name: Install Kubebuilder
      #   run: |
      #     curl -L -o kubebuilder "https://go.kubebuilder.io/dl/latest/$(go env GOOS)/$(go env GOARCH)"
      #     chmod +x kubebuilder && sudo mv kubebuilder /home/runner/bin
 
  
      - name: make manifest
        run: make manifests

      - name: make Helm chart
        run: | 
          kubebuilder edit --plugins=helm/v1-alpha
      
      - id: create
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          repositories: ${{ env.TARGET_REPO }}

      - uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner}}/${{ env.TARGET_REPO }}  
          path: ${{ env.TARGET_REPO }}
          token: ${{ steps.create.outputs.token }} 
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /home/runner/.local/bin/yq
          chmod +x /home/runner/.local/bin/yq

      - name: Update appVersion in Chart.yaml
        # working-directory: ${{ env.TARGET_REPO }}
        run: |
          # ここでは appVersion を "0.2.0" に更新
          yq eval '.appVersion = "${{ steps.version.outputs.version_tag }}"' -i dist/chart/Chart.yaml
          yq eval '.controllerManager.container.image.repository = "${{ env.USERNAME }}/cloudflare-controller:${{ steps.version.outputs.version_tag }}"' -i dist/chart/values.yaml

      - name: Sync files using rsync
        run: |
          rsync -av --delete ./dist/chart/ ${{ env.TARGET_REPO }}/charts

      - name: Commit changes in target repository
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "GitHub Actions"
          author_email: "actions@github.com"
          message: "Sync files from source repository"
          cwd: ${{ env.TARGET_REPO }} 

      
      - name: Push changes to target repository
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ steps.create.outputs.token }} 
          repository: laininthewired/${{ env.TARGET_REPO }} 
          branch: main
          directory: ${{ env.TARGET_REPO }} 
  
      
      
        
      # - name: echo
      #   run: echo test
      
      # - name: Get latest tag
      #   id: get_latest_tag
      #   run: |
      #     latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
      #     echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
      # - name: Determine version bump
      #   id: determine_bump
      #   run: |
      #     if [[ "${{ github.event.pull_request.labels.*.name }}" == *"major"* ]]; then
      #       echo "BUMP=major" >> $GITHUB_ENV
      #     elif [[ "${{ github.event.pull_request.labels.*.name }}" == *"minor"* ]]; then
      #       echo "BUMP=minor" >> $GITHUB_ENV
      #     else
      #       echo "BUMP=patch" >> $GITHUB_ENV
      #     fi
