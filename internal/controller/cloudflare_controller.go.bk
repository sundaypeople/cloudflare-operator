/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"
	"strings"

	"gopkg.in/yaml.v3"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"

	cf "github.com/cloudflare/cloudflare-go"
	cloudflarev1beta1 "github.com/laininthewired/cloudflare-ingress-controller/api/v1beta1"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/log"
)

// CloudflareReconciler reconciles a Cloudflare object
type CloudflareReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// IngressRule は単一のIngressルールを表します。
type IngressRule struct {
	// Hostname はホスト名です。必須フィールドです。
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty"`

	// Service はサービスのURLです。必須フィールドです。
	Service string `json:"service" yaml:"service"`
}

// CloudflareSpec はクラウドフレアの仕様を表します。
type CloudflareConfig struct {
	// Ingress はIngressルールのリストです。

	Tunnel string `json:"tunnel" yaml:"tunnel"`

	Metrics string `json:"metrics" yaml:"metrics"`

	Ingress []IngressRule `json:"ingress,omitempty" yaml:"ingress,omitempty"`

	// Replicas はレプリカの数です。
	// Replicas int32 `json:"replicas,omitempty" yaml:"replicas,omitempty"`
	// TunnelID はトンネルのIDです。必須フィールドです。

	CredentialsFile string `json:"credentials-file" yaml:"credentials-file"`
}

// +kubebuilder:rbac:groups=cloudflare.laininthewired.github.io,resources=cloudflares,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=cloudflare.laininthewired.github.io,resources=cloudflares/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=cloudflare.laininthewired.github.io,resources=cloudflares/finalizers,verbs=update
// +kubebuilder:rbac:groups=core,resources=configmaps,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=core,resources=services,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=core,resources=events,verbs=create;update;patch
// +kubebuilder:rbac:groups=core,resources=secrets,verbs=get;list;watch;create;update;patch;delete

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the Cloudflare object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.20.0/pkg/reconcile

func (r *CloudflareReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	logger := log.FromContext(ctx)

	var cf cloudflarev1beta1.Cloudflare
	// var tunnel cloudflarev1beta1.Tunnel

	// err := r.Get(ctx, req.NamespacedName, &tunnel)
	// // test := "test2"
	// logger.Info("aaa3", "tunnel", req.NamespacedName)

	// err = r.reconcileTunnel(ctx, tunnel)
	// if err != nil {
	// 	result, err2 := r.updateStatus(ctx, cf)
	// 	logger.Error(err2, "unable to update status")
	// 	return result, err
	// }

	err := r.Get(ctx, req.NamespacedName, &cf)
	if errors.IsNotFound(err) {
		return ctrl.Result{}, nil
	}
	if err != nil {
		logger.Error(err, "unable to get Cloudflare", "name", req.NamespacedName)
		return ctrl.Result{}, err
	}
	if !cf.ObjectMeta.DeletionTimestamp.IsZero() {
		if err := r.deleteDNSRecord(ctx, cf); err != nil {
			logger.Error(err, "failed to delete DNS records during finalization")
			return ctrl.Result{}, err
		}
		// Finalizer の解除処理をここで実施（必要に応じて）
		return ctrl.Result{}, nil
	}

	err = r.reconcileConfigMap(ctx, cf)
	if err != nil {
		result, err2 := r.updateStatus(ctx, cf)
		logger.Error(err2, "unable to update status")
		return result, err
	}
	// err = r.reconcileDeployment(ctx, cf)
	// if err != nil {
	// 	result, err2 := r.updateStatus(ctx, cf)
	// 	logger.Error(err2, "unable to update status")
	// 	return result, err
	// }

	// // DNS レコードの作成／更新
	// if err := r.reconcileDNSRecord(ctx, cf); err != nil {
	// 	logger.Error(err, "failed to reconcile DNS records")
	// 	return ctrl.Result{}, err
	// }

	// // TODO(user): your logic here

	return ctrl.Result{}, nil
}

func (r *CloudflareReconciler) reconcileConfigMap(ctx context.Context, cloudflare cloudflarev1beta1.Cloudflare) error {
	logger := log.FromContext(ctx)

	cm := &corev1.ConfigMap{}
	cm.SetNamespace(cloudflare.Namespace)
	cm.SetName("cloudflare-" + cloudflare.Name)

	var ingressRules []IngressRule

	for _, content := range cloudflare.Spec.Ingress {
		ingressRule := IngressRule{
			Hostname: content.Hostname, // Hostnameが空の場合は省略可能
			Service:  content.Service,
		}
		ingressRules = append(ingressRules, ingressRule)
	}
	ingressRule := IngressRule{
		// Hostname: "" // Hostnameが空の場合は省略可能
		Service: "http_status:404",
	}
	ingressRules = append(ingressRules, ingressRule)
	// 構造体をYAMLにシリアライズ
	spec := CloudflareConfig{
		Tunnel:          cloudflare.Spec.TunnelID, // 必須フィールドを設定
		CredentialsFile: "/etc/cloudflared/creds/credentials.json",
		Ingress:         ingressRules,
		Metrics:         "0.0.0.0:2000",
	}

	yamlBytes, err := yaml.Marshal(&spec)
	if err != nil {
		logger.Error(err, "configmap marshal error")
	}
	// YAML文字列を出力
	yamlString := string(yamlBytes)
	fmt.Println(yamlString)

	op, err := ctrl.CreateOrUpdate(ctx, r.Client, cm, func() error {
		if cm.Data == nil {
			cm.Data = make(map[string]string)
		}

		cm.Data["config.yaml"] = yamlString

		return ctrl.SetControllerReference(&cloudflare, cm, r.Scheme)
	})

	if err != nil {
		logger.Error(err, "unable to create or update ConfigMap")
		return err
	}

	if op != controllerutil.OperationResultNone {
		logger.Info("reconcile ConfigMap successfully", "op", op)
	}

	return nil
}

// func (r *CloudflareReconciler) reconcileSecret(ctx context.Context, cloudflare cloudflarev1beta1.Cloudflare) error {
// 	logger := log.FromContext(ctx)
// 	sc := &corev1.Secret{}
// 	sc.SetName("cloudflare-" + cloudflare.Name)
// 	sc.SetNamespace(cloudflare.Namespace)
// 	logger.Info("test")

// 	return nil
// }

// func (r *CloudflareReconciler) reconcileDeployment(ctx context.Context, cloudlfare cloudflarev1beta1.Cloudflare) error {
// 	logger := log.FromContext(ctx)
// 	depName := "cloudflare-" + cloudlfare.Name
// 	cloudflareimage := "cloudflare/cloudflared:2025.1.0"
// 	owner, err := controllerReference(cloudlfare, r.Scheme)
// 	if err != nil {
// 		return err
// 	}
// 	deployment := appsv1apply.Deployment(depName, cloudlfare.Namespace).
// 		WithLabels(map[string]string{
// 			"app.kubernetes.io/name":       "cloudflare",
// 			"app.kubernetes.io/instance":   cloudlfare.Name,
// 			"app.kubernetes.io/created-by": "cloudflared-operator-controller-manager",
// 		}).
// 		WithOwnerReferences(owner).
// 		WithSpec(appsv1apply.DeploymentSpec().
// 			WithReplicas(cloudlfare.Spec.Replicas).
// 			WithSelector(metav1apply.LabelSelector().
// 				WithMatchLabels(map[string]string{
// 					"app.kubernetes.io/name":       "cloudflare",
// 					"app.kubernetes.io/instance":   cloudlfare.Name,
// 					"app.kubernetes.io/created-by": "cloudflared-operator-controller-manager",
// 				}),
// 			).
// 			WithTemplate(corev1apply.PodTemplateSpec().
// 				WithLabels(map[string]string{
// 					"app.kubernetes.io/name":       "cloudflare",
// 					"app.kubernetes.io/instance":   cloudlfare.Name,
// 					"app.kubernetes.io/created-by": "cloudflared-operator-controller-manager",
// 					//  trigger to restart
// 					"kubectl.kubernetes.io/restartedAt": strings.ReplaceAll(time.Now().Format(time.RFC3339), ":", "-"),
// 				}).
// 				WithSpec(corev1apply.PodSpec().
// 					WithContainers(
// 						corev1apply.Container().
// 							WithName("cloudflared").
// 							WithImage(cloudflareimage).
// 							WithArgs(
// 								"tunnel",
// 								"--config",
// 								"/etc/cloudflared/config/config.yaml",
// 								"--http2-origin",
// 								"--loglevel",
// 								"debug",
// 								"run",
// 							).
// 							// WithCommand("/bin/sh").
// 							// WithArgs("-c", "sleep 3600").
// 							WithLivenessProbe(
// 								corev1apply.Probe().
// 									WithHTTPGet(
// 										corev1apply.HTTPGetAction().
// 											WithPath("/ready").
// 											WithPort(intstr.FromInt(2000)),
// 									).
// 									WithFailureThreshold(1).
// 									WithInitialDelaySeconds(10).
// 									WithPeriodSeconds(10),
// 							).
// 							// WithTTY(true).   // TTY を有効化
// 							// WithStdin(true). // Stdin を有効化
// 							WithVolumeMounts(
// 								corev1apply.VolumeMount().
// 									WithName("config").
// 									WithMountPath("/etc/cloudflared/config").
// 									WithReadOnly(true),
// 								corev1apply.VolumeMount().
// 									WithName("creds").
// 									WithMountPath("/etc/cloudflared/creds").
// 									WithReadOnly(true),
// 							),
// 					).
// 					WithVolumes(
// 						corev1apply.Volume().
// 							WithName("creds").
// 							WithSecret(
// 								corev1apply.SecretVolumeSource().
// 									WithSecretName("tunnel-credentials"),
// 							),
// 						corev1apply.Volume().
// 							WithName("config").
// 							WithConfigMap(
// 								corev1apply.ConfigMapVolumeSource().
// 									WithName("cloudflare-"+cloudlfare.Name).
// 									WithItems(
// 										corev1apply.KeyToPath().
// 											WithKey("config.yaml").
// 											WithPath("config.yaml"),
// 									),
// 							),
// 					),
// 				),
// 			),
// 		)
// 	obj, err := runtime.DefaultUnstructuredConverter.ToUnstructured(deployment)
// 	if err != nil {
// 		return err
// 	}
// 	patch := &unstructured.Unstructured{
// 		Object: obj,
// 	}

// 	var current appsv1.Deployment
// 	err = r.Get(ctx, client.ObjectKey{Namespace: cloudlfare.Namespace, Name: depName}, &current)
// 	if err != nil && !errors.IsNotFound(err) {
// 		return err
// 	}
// 	currApplyConfig, err := appsv1apply.ExtractDeployment(&current, "cloudflared-operator-controller-manager")
// 	if err != nil {
// 		return err
// 	}

// 	if equality.Semantic.DeepEqual(deployment, currApplyConfig) {
// 		return nil
// 	}

// 	err = r.Patch(ctx, patch, client.Apply, &client.PatchOptions{
// 		FieldManager: "cloudflared-operator-controller-manager",
// 		Force:        pointer.Bool(true),
// 	})

//		if err != nil {
//			logger.Error(err, "unable to create or update Deployment")
//			return err
//		}
//		logger.Info("reconcile Deployment successfully", "name", cloudlfare.Name)
//		return nil
//	}
func (r *CloudflareReconciler) updateStatus(ctx context.Context, Cloudflare cloudflarev1beta1.Cloudflare) (ctrl.Result, error) {
	meta.SetStatusCondition(&Cloudflare.Status.Conditions, metav1.Condition{
		Type:   cloudflarev1beta1.TypeCloudflareViewAvailable,
		Status: metav1.ConditionTrue,
		Reason: "OK",
	})
	meta.SetStatusCondition(&Cloudflare.Status.Conditions, metav1.Condition{
		Type:   cloudflarev1beta1.TypeCloudflareViewDegraded,
		Status: metav1.ConditionFalse,
		Reason: "OK",
	})

	var cm corev1.ConfigMap
	err := r.Get(ctx, client.ObjectKey{Namespace: Cloudflare.Namespace, Name: "cloudflare-" + Cloudflare.Name}, &cm)
	if errors.IsNotFound(err) {
		meta.SetStatusCondition(&Cloudflare.Status.Conditions, metav1.Condition{
			Type:    cloudflarev1beta1.TypeCloudflareViewDegraded,
			Status:  metav1.ConditionTrue,
			Reason:  "Reconciling",
			Message: "ConfigMap not found",
		})
		meta.SetStatusCondition(&Cloudflare.Status.Conditions, metav1.Condition{
			Type:   cloudflarev1beta1.TypeCloudflareViewAvailable,
			Status: metav1.ConditionFalse,
			Reason: "Reconciling",
		})
	} else if err != nil {
		return ctrl.Result{}, err
	}

	var dep appsv1.Deployment
	err = r.Get(ctx, client.ObjectKey{Namespace: Cloudflare.Namespace, Name: "viewer-" + Cloudflare.Name}, &dep)
	if errors.IsNotFound(err) {
		meta.SetStatusCondition(&Cloudflare.Status.Conditions, metav1.Condition{
			Type:    cloudflarev1beta1.TypeCloudflareViewDegraded,
			Status:  metav1.ConditionTrue,
			Reason:  "Reconciling",
			Message: "Deployment not found",
		})
		meta.SetStatusCondition(&Cloudflare.Status.Conditions, metav1.Condition{
			Type:   cloudflarev1beta1.TypeCloudflareViewAvailable,
			Status: metav1.ConditionFalse,
			Reason: "Reconciling",
		})
	} else if err != nil {
		return ctrl.Result{}, err
	}

	result := ctrl.Result{}
	if dep.Status.AvailableReplicas == 0 {
		meta.SetStatusCondition(&Cloudflare.Status.Conditions, metav1.Condition{
			Type:    cloudflarev1beta1.TypeCloudflareViewAvailable,
			Status:  metav1.ConditionFalse,
			Reason:  "Unavailable",
			Message: "AvailableReplicas is 0",
		})
		result = ctrl.Result{Requeue: true}
	}

	err = r.Status().Update(ctx, &Cloudflare)
	return result, err
}

// // SetupWithManager sets up the controller with the Manager.
func (r *CloudflareReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&cloudflarev1beta1.Cloudflare{}).
		Named("cloudflare").
		Complete(r)
}

// func controllerReference(cloudflare cloudflarev1beta1.Cloudflare, scheme *runtime.Scheme) (*metav1apply.OwnerReferenceApplyConfiguration, error) {
// 	gvk, err := apiutil.GVKForObject(&cloudflare, scheme)
// 	if err != nil {
// 		return nil, err
// 	}
// 	ref := metav1apply.OwnerReference().
// 		WithAPIVersion(gvk.GroupVersion().String()).
// 		WithKind(gvk.Kind).
// 		WithName(cloudflare.Name).
// 		WithUID(cloudflare.GetUID()).
// 		WithBlockOwnerDeletion(true).
// 		WithController(true)
// 	return ref, nil
// }

// // make docker-build
// // kind load docker-image controller:latest
// // kubectl logs -n cloudflared-operator-system deployments/cloudflared-operator-controller-manager -c manager -f
// // kubectl rollout restart -n cloudflared-operator-system deployment cloudflared-operator-controller-manager
// // kc delete cloudflares cloudflare-sample

// // extractZoneFromHostname はホスト名からゾーン名（例："a.qpid.jp" → "qpid.jp"）を単純に抽出します。
// // ※ 実際は publicsuffix パッケージなどを利用して正確に判定してください。
// func extractZoneFromHostname(hostname string) (string, error) {
// 	parts := strings.Split(hostname, ".")
// 	if len(parts) < 2 {
// 		return "", fmt.Errorf("invalid hostname: %s", hostname)
// 	}
// 	zone := fmt.Sprintf("%s.%s", parts[len(parts)-2], parts[len(parts)-1])
// 	return zone, nil
// }

// // getAPITokenFromSecret は、指定された namespace/name の Secret から API トークン（キー "apiToken"）を取得します。
func (r *CloudflareReconciler) getAPITokenFromSecret(ctx context.Context) (string, string, error) {
	// ここでは固定値として設定しています。必要に応じて CRD の Spec や ConfigMap 等から動的に取得してください。
	secret := &corev1.Secret{}
	secretName := "cloudflare-api-token"
	secretNamespace := "default"
	if err := r.Get(ctx, client.ObjectKey{Namespace: secretNamespace, Name: secretName}, secret); err != nil {
		return "", "", fmt.Errorf("failed to get secret %s/%s: %w", secretNamespace, secretName, err)
	}
	apiTokenBytes, ok := secret.Data["apiToken"]
	accountIDBytes, ok := secret.Data["account_id"]
	if !ok {
		return "", "", fmt.Errorf("secret %s/%s does not contain key 'apiToken'", secretNamespace, secretName)
	}
	apiToken := strings.TrimSpace(string(apiTokenBytes))
	accountID := strings.TrimSpace(string(accountIDBytes))

	return apiToken, accountID, nil
}

func (r *CloudflareReconciler) reconcileDNSRecord(ctx context.Context, cfCR cloudflarev1beta1.Cloudflare) error {
	logger := log.FromContext(ctx)

	// API トークンは Secret から取得する
	apiToken, _, err := r.getAPITokenFromSecret(ctx)
	if err != nil {
		return err
	}

	// API クライアントの初期化
	api, err := cf.NewWithAPIToken(apiToken)
	if err != nil {
		return fmt.Errorf("failed to create Cloudflare API client: %w", err)
	}

	tunnelID := cfCR.Spec.TunnelID
	if tunnelID == "" {
		return fmt.Errorf("tunnelID is empty in CRD spec")
	}
	targetCNAME := fmt.Sprintf("%s.cfargotunnel.com", tunnelID)

	// CRD の ingress ルールをゾーン毎にグループ化（key: zoneID、value: 対象ホストの存在マップ）
	desiredRecords := make(map[string]map[string]bool)

	for _, rule := range cfCR.Spec.Ingress {
		if rule.Hostname == "" {
			continue
		}
		zoneName, err := extractZoneFromHostname(rule.Hostname)
		if err != nil {
			logger.Error(err, "failed to extract zone from hostname", "hostname", rule.Hostname)
			continue
		}
		zoneID, err := api.ZoneIDByName(zoneName)
		if err != nil {
			logger.Error(err, "failed to get zone ID", "zoneName", zoneName)
			continue
		}
		// 記録用マップ
		if desiredRecords[zoneID] == nil {
			desiredRecords[zoneID] = make(map[string]bool)
		}
		desiredRecords[zoneID][rule.Hostname] = true

		// zoneID を ResourceContainer 型に変換して渡す
		resourceContainer := &cf.ResourceContainer{Identifier: zoneID}

		// DNS レコードの取得（ListDNSRecords は (records, resp, error) を返す）
		listParams := cf.ListDNSRecordsParams{
			Type: "CNAME",
			Name: rule.Hostname,
		}
		records, _, err := api.ListDNSRecords(ctx, resourceContainer, listParams)
		if err != nil {
			logger.Error(err, "failed to list DNS records", "hostname", rule.Hostname)
			continue
		}

		if len(records) == 0 {
			// レコードがなければ作成
			proxied := false
			createParams := cf.CreateDNSRecordParams{
				Type:    "CNAME",
				Name:    rule.Hostname,
				Content: targetCNAME,
				TTL:     120,
				Proxied: &proxied,
			}
			_, err := api.CreateDNSRecord(ctx, resourceContainer, createParams)
			if err != nil {
				logger.Error(err, "failed to create DNS record", "hostname", rule.Hostname)
				continue
			}
			logger.Info("DNS record created", "hostname", rule.Hostname, "content", targetCNAME)
		} else {
			// 存在するレコードについて、最初のものを対象とする
			record := records[0]
			if record.Content != targetCNAME {
				proxied := false
				updateParams := cf.UpdateDNSRecordParams{
					ID:      record.ID,
					Type:    "CNAME",
					Name:    rule.Hostname,
					Content: targetCNAME,
					TTL:     120,
					Proxied: &proxied,
				}
				updatedRecord, err := api.UpdateDNSRecord(ctx, resourceContainer, updateParams)
				if err != nil {
					logger.Error(err, "failed to update DNS record", "hostname", rule.Hostname)
					continue
				}
				logger.Info("DNS record updated", "hostname", rule.Hostname, "content", updatedRecord.Content)
			} else {
				logger.Info("DNS record is already up-to-date", "hostname", rule.Hostname)
			}
		}
	}

	// 各ゾーンごとに、CRD に存在しないホストのレコードを削除する
	for zoneID, desiredHostnames := range desiredRecords {
		resourceContainer := &cf.ResourceContainer{Identifier: zoneID}
		listParams := cf.ListDNSRecordsParams{
			Type: "CNAME",
		}
		records, _, err := api.ListDNSRecords(ctx, resourceContainer, listParams)
		if err != nil {
			logger.Error(err, "failed to list DNS records for cleanup", "zoneID", zoneID)
			continue
		}
		for _, rec := range records {
			// 今回の tunnel 用レコードで、かつ CRD に存在しなければ削除
			if rec.Content == targetCNAME {
				if _, exists := desiredHostnames[rec.Name]; !exists {
					err = api.DeleteDNSRecord(ctx, resourceContainer, rec.ID)
					if err != nil {
						logger.Error(err, "failed to delete DNS record", "hostname", rec.Name, "recordID", rec.ID)
						continue
					}
					logger.Info("DNS record deleted", "hostname", rec.Name, "recordID", rec.ID)
				}
			}
		}
	}

	return nil
}

// // deleteDNSRecord は、CRD 削除時に CRD 内の ingress ルールに対応する DNS レコードを削除します。
func (r *CloudflareReconciler) deleteDNSRecord(ctx context.Context, cfCR cloudflarev1beta1.Cloudflare) error {
	logger := log.FromContext(ctx)

	apiToken, _, err := r.getAPITokenFromSecret(ctx)
	if err != nil {
		return err
	}
	api, err := cf.NewWithAPIToken(apiToken)
	if err != nil {
		return fmt.Errorf("failed to create Cloudflare API client: %w", err)
	}

	for _, rule := range cfCR.Spec.Ingress {
		if rule.Hostname == "" {
			continue
		}
		zoneName, err := extractZoneFromHostname(rule.Hostname)
		if err != nil {
			logger.Error(err, "failed to extract zone from hostname", "hostname", rule.Hostname)
			continue
		}
		zoneID, err := api.ZoneIDByName(zoneName)
		if err != nil {
			logger.Error(err, "failed to get zone ID", "zoneName", zoneName)
			continue
		}
		resourceContainer := &cf.ResourceContainer{Identifier: zoneID}
		listParams := cf.ListDNSRecordsParams{
			Type: "CNAME",
			Name: rule.Hostname,
		}
		records, _, err := api.ListDNSRecords(ctx, resourceContainer, listParams)
		if err != nil {
			logger.Error(err, "failed to list DNS records", "hostname", rule.Hostname)
			continue
		}
		for _, record := range records {
			err = api.DeleteDNSRecord(ctx, resourceContainer, record.ID)
			if err != nil {
				logger.Error(err, "failed to delete DNS record", "hostname", rule.Hostname, "recordID", record.ID)
				continue
			}
			logger.Info("DNS record deleted", "hostname", rule.Hostname, "recordID", record.ID)
		}
	}

	return nil
}

// func (r *CloudflareReconciler) reconcileTunnel(ctx context.Context, tunnel cloudflarev1beta1.Tunnel) error {
// 	logger := log.FromContext(ctx)
// 	tunnelID, tunnelSecret, accountID, err := r.createTunnel(ctx, tunnel.Spec.TunnelName)
// 	if err != nil {
// 		return fmt.Errorf("failed to create Cloudflare tunnel: %w", err)
// 	}
// 	c := fmt.Sprintf(`{"AccountTag":"%s","TunnelSecret":"%s","TunnelID":"%s"}`, accountID, tunnelSecret, tunnelID)
// 	cb := []byte(c)
// 	credentialBase64 := base64.StdEncoding.EncodeToString(cb)
// 	data := map[string][]byte{
// 		"credentials.json": []byte(credentialBase64),
// 	}
// 	secretName := tunnelID

// 	secret := &corev1.Secret{
// 		ObjectMeta: metav1.ObjectMeta{
// 			Name:      secretName,
// 			Namespace: "default",
// 		},
// 		Data: data,
// 	}
// 	op, err := ctrl.CreateOrUpdate(ctx, r.Client, secret, func() error {
// 		return ctrl.SetControllerReference(&tunnel, secret, r.Scheme)
// 	})

// 	if err != nil {
// 		logger.Error(err, "unable to create or update Secret")
// 		return err
// 	}

// 	if op != controllerutil.OperationResultNone {
// 		logger.Info("reconcile Secret successfully", "op", op)
// 	}
// 	return nil
// }

// func (r *CloudflareReconciler) createTunnel(ctx context.Context, tunnelName string) (string, string, string, error) {
// 	// logger := log.FromContext(ctx)
// 	apiToken, accountID, err := r.getAPITokenFromSecret(ctx)
// 	if err != nil {
// 		return "", "", "", err
// 	}
// 	api, err := cf.NewWithAPIToken(apiToken)
// 	if err != nil {
// 		return "", "", "", fmt.Errorf("failed to create Cloudflare API client: %w", err)
// 	}

// 	randSecret := make([]byte, 32)
// 	if _, err := rand.Read(randSecret); err != nil {
// 		return "", "", "", err
// 	}
// 	tunnelSecret := base64.StdEncoding.EncodeToString(randSecret)

// 	rc := cloudflare.AccountIdentifier(accountID)

// 	listparam := cloudflare.TunnelListParams{}
// 	tunnels, _, err := api.ListTunnels(ctx, rc, listparam)
// 	if err != nil {
// 		return "", "", "", err
// 	}
// 	for _, v := range tunnels {
// 		fmt.Println("v.name:", v.Name, " tunnelName", tunnelName)
// 		if v.Name == tunnelName {
// 			return v.ID, v.Secret, accountID, err
// 		}
// 	}

// 	params := cloudflare.TunnelCreateParams{
// 		Name:   "test",
// 		Secret: tunnelSecret,
// 		// Indicates if this is a locally or remotely configured tunnel "local" or "cloudflare"
// 		ConfigSrc: "local",
// 	}

// 	tunnel, err := api.CreateTunnel(ctx, rc, params)
// 	if err != nil {
// 		return "", "", "", err

// 	}
// 	return tunnel.ID, tunnel.Secret, accountID, nil
// }
